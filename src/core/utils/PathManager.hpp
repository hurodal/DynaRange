// File: src/core/utils/PathManager.hpp
/**
 * @file core/utils/PathManager.hpp
 * @brief Declares a utility class for managing output file paths.
 * @details Centralizes logic for determining output directories and joining paths.
 * Filename generation is delegated to OutputFilenameGenerator.
 */
#pragma once

#include "../arguments/ArgumentsOptions.hpp"
#include <filesystem>
#include <string> // Added for GetOutputDirectory

namespace fs = std::filesystem;

/**
 * @class PathManager
 * @brief Centralizes the logic for determining output directories and constructing full paths.
 */
class PathManager {
public:

    /**
     * @brief Constructs a PathManager. Determines the base output directory.
     * @param opts The program options, used to determine base paths from output_filename.
     */
    explicit PathManager(const ProgramOptions& opts);

    /**
     * @brief Gets the base directory determined for all output files.
     * @return The filesystem path to the output directory.
     */
    fs::path GetOutputDirectory() const;

    /**
     * @brief Joins the base output directory with a generated filename.
     * @param generated_filename The filename (potentially with extension) generated by OutputFilenameGenerator.
     * @return The full, absolute filesystem path for the output file.
     */
    fs::path GetFullPath(const fs::path& generated_filename) const;

    /**
     * @brief Gets the path to the application's executable directory.
     * @return The filesystem path to the directory containing the running executable.
     */
    fs::path GetAppDirectory() const;

    /**
     * @brief Gets the path to the 'locale' directory for internationalization.
     * @return The filesystem path to the locale directory (usually AppDirectory/locale).
     */
    fs::path GetLocaleDirectory() const;

    /**
     * @brief Gets the full path for a given asset file (e.g., "logo.png").
     * @param asset_name The filename of the asset (relative to app directory or assets subdir).
     * @return The full filesystem path to the asset.
     */
    fs::path GetAssetPath(const std::string& asset_name) const;

    // --- Methods to be REMOVED (logic moved to OutputFilenameGenerator) ---
    // fs::path GetCsvOutputPath() const; // Replaced by GetFullPath + GenerateCsvFilename
    // fs::path GetIndividualPlotPath(...) const; // Replaced by GetFullPath + GenerateIndividualPlotFilename
    // fs::path GetSummaryPlotPath(...) const; // Replaced by GetFullPath + GenerateSummaryPlotFilename
    // fs::path GetPrintPatchesPath(...) const; // Replaced by GetFullPath + GeneratePrintPatchesFilename

private:
    const ProgramOptions& m_opts;      ///< A reference to the program options.
    fs::path m_app_directory;          ///< The directory where the application executable resides.
    fs::path m_output_directory;       ///< The base directory determined for all outputs.
};