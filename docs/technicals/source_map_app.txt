src/
├── core
│   ├── analysis
│   │   ├── Analysis.cpp           ← Base abstracta para análisis (no usada directamente)
│   │   ├── Analysis.hpp
│   │   ├── CurveCalculator.cpp    ← Calcula curvas de SNR mediante ajuste polinómico
│   │   ├── CurveCalculator.hpp
│   │   ├── FilePreparer.cpp       ← Prepara archivos RAW para análisis (lectura, validación)
│   │   ├── FilePreparer.hpp
│   │   ├── ImageAnalyzer.cpp      ← Detecta parches en la carta y mide S/N *per-pixel* (¡NO normaliza!)
│   │   ├── ImageAnalyzer.hpp
│   │   ├── RawProcessor.cpp       ← Procesa datos RAW brutos (linearización, clipping)
│   │   └── RawProcessor.hpp
│   │
│   ├── arguments
│   │   ├── Arguments.cpp          ← Definición de ProgramOptions (estructura de parámetros)
│   │   ├── Arguments.hpp
│   │   ├── CommandGenerator.cpp   ← Genera comandos CLI para GUI (sin ejecutar)
│   │   ├── CommandGenerator.hpp
│   │   ├── CommandLineParser.cpp  ← Parsea argv → llena ProgramOptions (CLI++ lib)
│   │   └── CommandLineParser.hpp
│   │
│   ├── ChartProfile.cpp           ← Carga y aplica perfil de color de la carta (magenta)
│   │ ├── ChartProfile.hpp
│   │
│   ├── engine
│   │   ├── Engine.cpp             ← Orquestador principal: Initialize → Process → Normalize → Report
│   │   ├── Engine.hpp
│   │   ├── Initialization.cpp     ← Configura black/sat levels y carga archivos base
│   │   ├── Initialization.hpp
│   │   ├── Normalization.cpp      ← FASE DE FLUJO: Valida y aplica normalización usando Normalizer
│   │   ├── Normalization.hpp      ← ← Usa Normalizer.cpp sin modificar su lógica
│   │   ├── Processing.cpp         ← Llama a ImageAnalyzer + RawProcessor para procesar todos los archivos
│   │   ├── Processing.hpp
│   │   ├── Reporting.cpp          ← Escribe resultados CSV y genera gráficos si se pide
│   │   └── Reporting.hpp
│   │
│   ├── graphics
│   │   ├── Drawing.cpp            ← Dibuja rectángulos sobre imágenes (para visualización)
│   │   ├── Drawing.hpp
│   │   ├── ImageProcessing.cpp    ← Corrige perspectiva, recorta, alinea la carta
│   │   ├── ImageProcessing.hpp
│   │   ├── Plotting.cpp           ← Genera PNGs de curvas SNR (usando gnuplot o OpenCV)
│   │   └── Plotting.hpp
│   │
│   ├── io
│   │   ├── RawFile.cpp            ← Lee metadatos y píxeles de archivos RAW (.DNG, .ARW...)
│   │   └── RawFile.hpp
│   │
│   ├── math
│   │   ├── Math.cpp               ← Funciones matemáticas genéricas (interpolación, estadística básica)
│   │   └── Math.hpp
│   │
│   ├── normalization              ← LIBRERÍA DE UTILIDADES MATEMÁTICAS PURAS
│   │   ├── Normalizer.cpp         ← NormalizeSNR(), HasSufficientDataForDR() → cálculos sin estado
│   │   └── Normalizer.hpp         ← ← ¡Nunca se modifica! Solo se usa desde engine/Normalization
│   │
│   └── utils
│       ├── PathManager.cpp        ← Gestiona rutas relativas, extensiones, existencia de archivos
│       └── PathManager.hpp
│
├── DynaRangeGuiApp.cpp            ← Punto de entrada de la GUI (wxWidgets app)
├── gui
│   ├── DynaRangeBase.cpp          ← Código generado por wxFormBuilder (NO TOCAR)
│   ├── DynaRangeBase.h
│   ├── DynaRangeFrame.cpp         ← Lógica de eventos: botones, sliders, llamadas a rango()
│   ├── DynaRangeFrame.hpp
│   └── icons                      ← Recursos visuales (iconos, logos, favicon)
│       ├── favicon_noise.ico
│       ├── favicon_owl.ico
│       ├── install_icon_owl.png
│       └── Logo_DynaRange.png
│
├── R                              ← Scripts de soporte externo (análisis, generación de cartas)
│   ├── detect4corners.R           ← Detecta esquinas de la carta (auxiliar de pre-procesamiento)
│   ├── dynamicrange_V2_Sony.R     ← Referencia de cálculo (validación cruzada)
│   └── magentachart.R             ← Genera la carta de prueba en formato PNG
│
├── rango.cpp                      ← Punto de entrada CLI: llama a ParseArguments → RunDynamicRangeAnalysis
└── rango.sublime-workspace        ← Archivo de configuración del editor (ignorable en git)